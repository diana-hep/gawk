import rejig.pybytecode

def testme():
    return data.filter(x > 50)

print(rejig.pybytecode.BytecodeWalker(testme).ast().dump())


def check(x):
    env = {}
    exec(("f = lambda: " + x), env)
    print(x, "\t\t|\t\t", rejig.pybytecode.BytecodeWalker(env["f"]).ast().dump())

check('"hello"')
check('"he\\nllo"')
check('"he\\\\nllo"')
check('"he\\"\\\\nllo"')
check('"he\'\\"\\\\nllo"')
check('"he\'\\"\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3llo"')
check('"he\'\\"\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\\N{LATIN SMALL LETTER ETH}llo"')

check('"""hello"""')
check('"""he\\nllo"""')
check('"""he\\\\nllo"""')
check('"""he\\"\\\\nllo"""')
check('"""he\'\\"\\\\nllo"""')
check('"""he\'\\"\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3llo"""')
check('"""he\'\\"\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\\N{LATIN SMALL LETTER ETH}llo"""')
check('"""he\'\\"\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\nllo"""')
check('"""he\'\\"\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\n"llo"""')

check("'hello'")
check("'he\\nllo'")
check("'he\\\\nllo'")
check("'he\\'\\\\nllo'")
check("'he\"\\'\\\\nllo'")
check("'he\"\\'\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3llo'")
check("'he\"\\'\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\\N{LATIN SMALL LETTER ETH}llo'")

check("'''hello'''")
check("'''he\\nllo'''")
check("'''he\\\\nllo'''")
check("'''he\\'\\\\nllo'''")
check("'''he\"\\'\\\\nllo'''")
check("'''he\"\\'\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3llo'''")
check("'''he\"\\'\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\\N{LATIN SMALL LETTER ETH}llo'''")
check("'''he\"\\'\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\nllo'''")
check("'''he\"\\'\\\\n\\a\\b\\f\\r\\t\\v\\123\\o123\\xf3\n'llo'''")

check('''.3''')
check('''-3''')
check('''- 3''')
check('''-  3''')
check('''--3''')
check('''-- 3''')
check('''- -3''')
check('''- - 3''')
check('''- -  3''')
check('''+3''')
check('''+ 3''')
check('''+  3''')
check('''++3''')
check('''++ 3''')
check('''+ +3''')
check('''+ + 3''')
check('''+ +  3''')
check('''+-3''')
check('''+- 3''')
check('''+ -3''')
check('''+ - 3''')
check('''+ -  3''')
check('''-+3''')
check('''-+ 3''')
check('''- +3''')
check('''- + 3''')
check('''- +  3''')
check('''-3.14''')
check('''- 3.14''')
check('''-  3.14''')
check('''--3.14''')
check('''-- 3.14''')
check('''- -3.14''')
check('''- - 3.14''')
check('''- -  3.14''')
check('''+3.14''')
check('''+ 3.14''')
check('''+  3.14''')
check('''++3.14''')
check('''++ 3.14''')
check('''+ +3.14''')
check('''+ + 3.14''')
check('''+ +  3.14''')
check('''+-3.14''')
check('''+- 3.14''')
check('''+ -3.14''')
check('''+ - 3.14''')
check('''+ -  3.14''')
check('''-+3.14''')
check('''-+ 3.14''')
check('''- +3.14''')
check('''- + 3.14''')
check('''- +  3.14''')
check('''-3e1''')
check('''- 3e1''')
check('''-  3e1''')
check('''--3e1''')
check('''-- 3e1''')
check('''- -3e1''')
check('''- - 3e1''')
check('''- -  3e1''')
check('''+3e1''')
check('''+ 3e1''')
check('''+  3e1''')
check('''++3e1''')
check('''++ 3e1''')
check('''+ +3e1''')
check('''+ + 3e1''')
check('''+ +  3e1''')
check('''+-3e1''')
check('''+- 3e1''')
check('''+ -3e1''')
check('''+ - 3e1''')
check('''+ -  3e1''')
check('''-+3e1''')
check('''-+ 3e1''')
check('''- +3e1''')
check('''- + 3e1''')
check('''- +  3e1''')

check('''[]''')
check('''[3]''')
check('''[3,]''')
check('''[3, 4]''')
check('''[3, 4,]''')
check('''[3, 4, 5]''')
check('''[3, 4, 5,]''')
check('''[3, 4, 5, 6]''')
check('''[3, 4, 5, 6,]''')

check('''[[1], 2, 3, 4, 5]''')
check('''[[1, 2], 3, 4, 5]''')
check('''[[1, 2, 3], 4, 5]''')
check('''[[1, 2, 3, 4], 5]''')
check('''[[1, 2, 3, 4, 5]]''')
check('''[[[1], 2, 3, 4, 5]]''')
check('''[[[1, 2], 3, 4, 5]]''')
check('''[[[1, 2, 3], 4, 5]]''')
check('''[[[1, 2, 3, 4], 5]]''')
check('''[[[1, 2, 3, 4, 5]]]''')

check('''[1, 2, 3, 4, [5]]''')
check('''[1, 2, 3, [4, 5]]''')
check('''[1, 2, [3, 4, 5]]''')
check('''[1, [2, 3, 4, 5]]''')
check('''[[1, 2, 3, 4, [5]]]''')
check('''[[1, 2, 3, [4, 5]]]''')
check('''[[1, 2, [3, 4, 5]]]''')
check('''[[1, [2, 3, 4, 5]]]''')

check('''3
    ''')
check('''3
    ''')
check('''3
    ''')
check('''3
    ''')
check('''
3''')
check('''
3''')
check('''
3''')
check('''
3''')

check('''a''')
check('''a.b''')
check('''a.b.c''')
check('''a.b.c.d''')
check('''a.b.c.d.e''')
check('''a[1]''')
check('''a[1][2]''')
check('''a[1][2][3]''')
check('''a[1][2][3][4]''')
check('''(9).stuff''')
check('''((9)).stuff''')
check('''(((9))).stuff''')

check('''a[1]''')
check('''a["hey"]''')
check('''a[1:2]''')
check('''a[:]''')
check('''a[1:]''')
check('''a[:1]''')
check('''a[::]''')
check('''a[1::]''')
check('''a[:1:]''')
check('''a[::1]''')
check('''a[1:2:]''')
check('''a[:1:2]''')
check('''a[1::2]''')
check('''a[1:2:3]''')
check('''a[1,]''')
check('''a["hey",]''')
check('''a[1:2,]''')
check('''a[:,]''')
check('''a[1:,]''')
check('''a[:1,]''')
check('''a[::,]''')
check('''a[1::,]''')
check('''a[:1:,]''')
check('''a[::1,]''')
check('''a[1:2:,]''')
check('''a[:1:2,]''')
check('''a[1::2,]''')
check('''a[1:2:3,]''')
check('''a[1,5]''')
check('''a["hey",5]''')
check('''a[1:2,5]''')
check('''a[:,5]''')
check('''a[1:,5]''')
check('''a[:1,5]''')
check('''a[::,5]''')
check('''a[1::,5]''')
check('''a[:1:,5]''')
check('''a[::1,5]''')
check('''a[1:2:,5]''')
check('''a[:1:2,5]''')
check('''a[1::2,5]''')
check('''a[1:2:3,5]''')
check('''a[1,5,]''')
check('''a["hey",5,]''')
check('''a[1:2,5,]''')
check('''a[:,5,]''')
check('''a[1:,5,]''')
check('''a[:1,5,]''')
check('''a[::,5,]''')
check('''a[1::,5,]''')
check('''a[:1:,5,]''')
check('''a[::1,5,]''')
check('''a[1:2:,5,]''')
check('''a[:1:2,5,]''')
check('''a[1::2,5,]''')
check('''a[1:2:3,5,]''')
check('''a[1,"a":"b"]''')
check('''a["hey","a":"b"]''')
check('''a[1:2,"a":"b"]''')
check('''a[:,"a":"b"]''')
check('''a[1:,"a":"b"]''')
check('''a[:1,"a":"b"]''')
check('''a[::,"a":"b"]''')
check('''a[1::,"a":"b"]''')
check('''a[:1:,"a":"b"]''')
check('''a[::1,"a":"b"]''')
check('''a[1:2:,"a":"b"]''')
check('''a[:1:2,"a":"b"]''')
check('''a[1::2,"a":"b"]''')
check('''a[1:2:3,"a":"b"]''')
check('''a[1,"a":"b",]''')
check('''a["hey","a":"b",]''')
check('''a[1:2,"a":"b",]''')
check('''a[:,"a":"b",]''')
check('''a[1:,"a":"b",]''')
check('''a[:1,"a":"b",]''')
check('''a[::,"a":"b",]''')
check('''a[1::,"a":"b",]''')
check('''a[:1:,"a":"b",]''')
check('''a[::1,"a":"b",]''')
check('''a[1:2:,"a":"b",]''')
check('''a[:1:2,"a":"b",]''')
check('''a[1::2,"a":"b",]''')
check('''a[1:2:3,"a":"b",]''')
check('''a[1,5,6]''')
check('''a["hey",5,6]''')
check('''a[1:2,5,6]''')
check('''a[:,5,6]''')
check('''a[1:,5,6]''')
check('''a[:1,5,6]''')
check('''a[::,5,6]''')
check('''a[1::,5,6]''')
check('''a[:1:,5,6]''')
check('''a[::1,5,6]''')
check('''a[1:2:,5,6]''')
check('''a[:1:2,5,6]''')
check('''a[1::2,5,6]''')
check('''a[1:2:3,5,6]''')
check('''a[1,5,6,]''')
check('''a["hey",5,6,]''')
check('''a[1:2,5,6,]''')
check('''a[:,5,6,]''')
check('''a[1:,5,6,]''')
check('''a[:1,5,6,]''')
check('''a[::,5,6,]''')
check('''a[1::,5,6,]''')
check('''a[:1:,5,6,]''')
check('''a[::1,5,6,]''')
check('''a[1:2:,5,6,]''')
check('''a[:1:2,5,6,]''')
check('''a[1::2,5,6,]''')
check('''a[1:2:3,5,6,]''')

check('''a[2].three''')
check('''a.three''')
check('''a[2]''')
check('''a.three[2]''')

check('''x and y''')
check('''x and y and z''')
check('''x and y and z and w''')
check('''not x''')
check('''not x and y''')
check('''x or y''')
check('''x or y and z''')
check('''x or y or z''')
check('''not x or y and z''')
check('''x or not y and z''')
check('''x or y and not z''')
check('''not x or not y and z''')
check('''not x or y and not z''')
check('''x or not y and not z''')
check('''not x or not y and not z''')
check('''x and y or z''')
check('''not x and y or z''')
check('''x and not y or z''')
check('''x and y or not z''')
check('''not x and not y or z''')
check('''not x and y or not z''')
check('''x and not y or not z''')

check('''x < y''')
check('''x > y''')
check('''x == y''')
check('''x >= y''')
check('''x <= y''')
check('''x != y''')
check('''x in y''')
check('''x not in y''')
check('''1 < y < 2''')
check('''1 < y == 2''')

check('''(x) < y''')
check('''(x) > y''')
check('''(x) == y''')
check('''(x) >= y''')
check('''(x) <= y''')
check('''(x) != y''')
check('''(x) in y''')
check('''(x) not in y''')
check('''(1) < y < 2''')
check('''(1) < y == 2''')

check('''x < (y)''')
check('''x > (y)''')
check('''x == (y)''')
check('''x >= (y)''')
check('''x <= (y)''')
check('''x != (y)''')
check('''x in (y)''')
check('''x not in (y)''')
check('''1 < (y) < 2''')
check('''1 < (y) == 2''')
check('''1 < y < (2)''')
check('''1 < y == (2)''')

check('''(x) < (y)''')
check('''(x) > (y)''')
check('''(x) == (y)''')
check('''(x) >= (y)''')
check('''(x) <= (y)''')
check('''(x) != (y)''')
check('''(x) in (y)''')
check('''(x) not in (y)''')
check('''(1) < (y) < 2''')
check('''(1) < (y) == 2''')
check('''(1) < y < (2)''')
check('''(1) < y == (2)''')

check('''x + y''')
check('''x + y + z''')
check('''x + y + z + w''')
check('''x - y''')
check('''x - y - z''')
check('''x - y - z - w''')
check('''x - y + z - w''')
check('''x * y''')
check('''x * y * z''')
check('''x * y * z * w''')
check('''x * y - z * w''')
check('''x / y''')
check('''x / y / z''')
check('''x / y / z / w''')
check('''x / y * z / w''')
check('''x % y''')
check('''x % y % z''')
check('''x % y % z % w''')
check('''x % y / z % w''')
check('''x // y''')
check('''x // y // z''')
check('''x // y // z // w''')
check('''x // y % z // w''')
check('''+x''')
check('''-x''')
check('''++x''')
check('''+-x''')
check('''-+x''')
check('''--x''')
check('''+x + y''')
check('''-x + y''')
check('''++x + y''')
check('''+-x + y''')
check('''-+x + y''')
check('''--x + y''')
check('''x + +x''')
check('''x + -x''')
check('''x + ++x''')
check('''x + +-x''')
check('''x + -+x''')
check('''x + --x''')
check('''x ** y''')
check('''x ** y ** z''')
check('''x ** y ** z ** w''')
check('''x ** y // z ** w''')
check('''x.y**2''')

check('{x => x}')
check('{x, y => x}')
check('{x, y, z => x}')
check('{x, => x}')
check('{x, y, => x}')
check('{x, y, z, => x}')
check('{x=1 => x}')
check('{x=1, y=1 => x}')
check('{x=1, y=1, z=1 => x}')
check('{x=1, => x}')
check('{x=1, y=1, => x}')
check('{x=1, y=1, z=1, => x}')
check('f({x => x})')
check('f({x, y => x})')
check('f({x, => x})')
check('f({x, y, => x})')
check('f(x => x)')
check('{x => x}()')
check('{x, y => x}()')
check('{x, => x}()')
check('{x, y, => x}()')
check('{x => x}(1)')
check('{x, y => x}(1)')
check('{x, => x}(1)')
check('{x, y, => x}(1)')
check('{x => x}(1,)')
check('{x, y => x}(1,)')
check('{x, => x}(1,)')
check('{x, y, => x}(1,)')
check('z = {x => x}; z')
check('z = {x => x} z')
check('z = {x, y => x}; z')
check('z = {x, y => x} z')
check('z = {x, => x}; z')
check('z = {x, => x} z')
check('z = {x, y, => x}; z')
check('z = {x, y, => x} z')

check('{x => x;}')
check('{x => x;;}')
check('{x => x;;;}')
check('{x => ;x}')
check('{x => ;;x}')
check('{x => ;;;x}')
check('{x => ;x;}')
check('{x => ;;x;;}')
check('{x => ;;;x;;;}')
check('{x => y = x; x}')
check('{x => y = x; x;}')
check('{x => y = x; x}')
check('{x => y = x; x;}')
check('{x => y = x;; x;;}')
check('{x => y = x;;; x;;;}')
check('{x => y = x; z=y; z}')
check('{x => y = x; z=y; z;}')
check('{x => y = x; z=y; z}')
check('{x => y = x; z=y; z;}')
check('{x => y = x; z=y; z;;}')
check('{x => y = x;;; z=y;;; z;;;}')

check('f()')
check('f(x)')
check('f(x,)')
check('f(x, y)')
check('f(x, y,)')
check('f(x, y, z)')
check('f(x, y, z,)')
check('f(x=1)')
check('f(x=1,)')
check('f(x=1, y)')
check('f(x, y=1,)')
check('f(x, y, z=1)')
check('f(x, y=1, z,)')

check('x = 1; x')
check('def f(x): x; x')
check('def f(x): x; x')
check('def f(x) {x} x')
check('def f(x) {x}; x')
check('def f(x,): x; x')
check('def f(x,) {x} x')
check('def f(x,) {x}; x')
check('def f(x, y): x; x')
check('def f(x, y,) {x} x')
check('def f(x, y,) {x}; x')
check('def f(x, y,) {x = y; x} x')
check('def f(x, y,) {x = y; x}; x')

check('$')
check('f($)')
check('$1')
check('f($1)')

check('0x123')
check('0o123')
check('3+4j')

check('x = 1; x')
check(';x = 1; x')
check('x = 1; x;')
check(';x = 1; x;')
check(';;x = 1;; x;;')
check(';;;x = 1;;; x;;;')
check('x, = 1; x')
check('x, y = 1; x')
check('x, y, = 1; x')
check('x, y, z = 1; x')
check('x, y, z, = 1; x')

check('if true: 1 else: 2')
check('if true: {1} else: {2}')
check('if true {1} else {2}')
check('if true {x = 1; x} else {y = 2; y}')
check('if true: 1 elif false: 2 else: 3')
check('if true: {1} elif false: {2} else: {3}')
check('if true {1} elif false {2} else {3}')
check('if true: 1 elif false: 2 elif true: 3 else: 4')

check('x = if true: 1 else: 2; x')
check('x = if true: {1} else: {2}; x')
check('x = if true: {1} else: {2} x')
check('x = if true {1} else {2}; x')
check('x = if true {1} else {2} x')
check('x = if true {x = 1; x} else {y = 2; y}; x')
check('x = if true {x = 1; x} else {y = 2; y} x')
check('x = if true: 1 elif false: 2 else: 3; x')
check('x = if true: {1} elif false: {2} else: {3}; x')
check('x = if true: {1} elif false: {2} else: {3} x')
check('x = if true {1} elif false {2} else {3}; x')
check('x = if true {1} elif false {2} else {3} x')
check('x = if true: 1 elif false: 2 elif true: 3 else: 4; x')

check('x = if true {;x = 1; x} else {y = 2; y}; x')
check('x = if true {;x = 1;; x} else {y = 2; y}; x')
check('x = if true {;;x = 1;; x} else {y = 2; y}; x')
check('x = if true {;;;x = 1;;; x} else {y = 2; y}; x')

check('x = if true: {;x = 1; x} else {y = 2; y}; x')
check('x = if true: {;x = 1;; x} else {y = 2; y}; x')
check('x = if true: {;;x = 1;; x} else {y = 2; y}; x')
check('x = if true: {;;;x = 1;;; x} else {y = 2; y}; x')

check('x = if true {x = 1; x} else {;y = 2; y} x')
check('x = if true {x = 1; x} else {;y = 2;; y} x')
check('x = if true {x = 1; x} else {;;y = 2;; y} x')
check('x = if true {x = 1; x} else {;;;y = 2;;; y} x')

check('x = if true {x = 1; x} else: {;y = 2; y} x')
check('x = if true {x = 1; x} else: {;y = 2;; y} x')
check('x = if true {x = 1; x} else: {;;y = 2;; y} x')
check('x = if true {x = 1; x} else: {;;;y = 2;;; y} x')

check("{=> 3.14}")
check("{=> 3.14;}")
check("{=> 3.14;;}")
check("{=> ;3.14}")
check("{=> ;;3.14}")
check("{=> ;3.14;}")
check("{=> ;;3.14;;}")
check("def pi(): 3.14; pi()")
check("def pi() {3.14} pi()")

check("x is integer")
check("x is not real")

check("False")
check("True")
check("not x")
check("not x and not y")
check("not x and not y and not z")
check("not x and not y and not z")
check("not x and not y and not z")
check("not x or not y")
check("not x or not y or not z")
check("not x or not y or not z")
check("not x or not y or not z")
check("(not x or not y) and not z")
check("not x and (not y or not z)")

check("not x(1)")
check("not x(1) and not y(2)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) or not y(2)")
check("not x(1) or not y(2) or not z(3)")
check("not x(1) or not y(2) or not z(3)")
check("not x(1) or not y(2) or not z(3)")
check("(not x(1) or not y(2)) and not z(3)")
check("not x(1) and (not y(2) or not z(3))")

check("not x.a")
check("not x.a and not y.b")
check("not x.a and not y.b and not z.c")
check("not x.a and not y.b and not z.c")
check("not x.a and not y.b and not z.c")
check("not x.a or not y.b")
check("not x.a or not y.b or not z.c")
check("not x.a or not y.b or not z.c")
check("not x.a or not y.b or not z.c")
check("(not x.a or not y.b) and not z.c")
check("not x.a and (not y.b or not z.c)")

check("False")
check("True")
check("not x")
check("not x and not y")
check("not x and not y and not z")
check("not x and not y and not z")
check("not x and not y and not z")
check("not x or not y")
check("not x or not y or not z")
check("not x or not y or not z")
check("not x or not y or not z")
check("(not x or not y) and not z")
check("not x and (not y or not z)")

check("not x(1)")
check("not x(1) and not y(2)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) or not y(2)")
check("not x(1) or not y(2) or not z(3)")
check("not x(1) or not y(2) or not z(3)")
check("not x(1) or not y(2) or not z(3)")
check("(not x(1) or not y(2)) and not z(3)")
check("not x(1) and (not y(2) or not z(3))")

check("not x.a")
check("not x.a and not y.b")
check("not x.a and not y.b and not z.c")
check("not x.a and not y.b and not z.c")
check("not x.a and not y.b and not z.c")
check("not x.a or not y.b")
check("not x.a or not y.b or not z.c")
check("not x.a or not y.b or not z.c")
check("not x.a or not y.b or not z.c")
check("(not x.a or not y.b) and not z.c")
check("not x.a and (not y.b or not z.c)")

check("False")
check("True")
check("not x")
check("not x and not y")
check("not x and not y and not z")
check("not x and not y and not z")
check("not x and not y and not z")
check("not x or not y")
check("not x or not y or not z")
check("not x or not y or not z")
check("not x or not y or not z")
check("(not x or not y) and not z")
check("not x and (not y or not z)")

check("not x(1)")
check("not x(1) and not y(2)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) and not y(2) and not z(3)")
check("not x(1) or not y(2)")
check("not x(1) or not y(2) or not z(3)")
check("not x(1) or not y(2) or not z(3)")
check("not x(1) or not y(2) or not z(3)")
check("(not x(1) or not y(2)) and not z(3)")
check("not x(1) and (not y(2) or not z(3))")

check("not x.a")
check("not x.a and not y.b")
check("not x.a and not y.b and not z.c")
check("not x.a and not y.b and not z.c")
check("not x.a and not y.b and not z.c")
check("not x.a or not y.b")
check("not x.a or not y.b or not z.c")
check("not x.a or not y.b or not z.c")
check("not x.a or not y.b or not z.c")
check("(not x.a or not y.b) and not z.c")
check("not x.a and (not y.b or not z.c)")

check("x != y")
check("x == y")
check("x <= y")
check("x > y")
check("x >= y")
check("x < y")
check("x not in y")
check("x in y")

check("x == y and y == z")
check("x == y and y == z")
check("x == y or y == z")
check("x != y or y != z")
check("x != y or y != z")
check("x != y or y == z")

check("a and b and c and d and e")
check("a and b and c and d and e")
